head
    title Sensor test page
    meta(charset="UTF-8")
    meta(name="viewport", content="initial-scale=1.0, maximum-scale=1.0, width=device-width")
    link(rel="stylesheet" href="./fader/style.css")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.7.77/Tone.js")
    script(src="./fader/main.js")
    include fader/fader_gen
    include fader/fader_action
        
body(onload='init()')
    #result
    #slider-container 

    svg#slider-bg(viewbox='0 0 1200 600' aria-hidden="true" width='100%' height='100%' style='position:absolute; top:0px; left:0px;')
        defs
            include fader/fader_gradient
            include fader/fader_style
        include fader/fader_faders.pug
    canvas#cover.touch_pickup_ignore.prevent-select(aria-hidden="true")

include note-player/toolbar
script.
    let params = new URLSearchParams(window.location.search);
    if(params.has('board')){
        switch(params.get('board')){
            case 'tb':
                console.log('touch board');
            break;
            case 'btb8':
                console.log('btb board');
                // lazy demo
                for(let i = 8; i<12;i++){
                    document.querySelectorAll('.svg-thumb')[i].style.display='none';
                    document.querySelectorAll('.svg-text')[i].style.display='none';
                    document.querySelectorAll('.svg-fader__track')[i].style.display='none';
                    document.querySelectorAll('.svg-fader')[i].style.display='none';
                    midiMapper.assign(15, 'cc', i-8, (value)=>{
                        Tone.start();
                        setFaderElements({
                            svgElement: document.querySelector(`#thumb_${i-8}`),
                            inputElement: document.querySelectorAll('input')[i-8],
                            value: value,
                            y: getY(value, faderHeight, thumbHeight)
                        })
                        processFader(i, value)
                    })
                }
            break; 
            case 'btb6':
                console.log('btb board');
                // lazy demo
                for(let i = 6; i<12;i++){
                    document.querySelectorAll('.svg-thumb')[i].style.display='none';
                    document.querySelectorAll('.svg-text')[i].style.display='none';
                    document.querySelectorAll('.svg-fader__track')[i].style.display='none';
                    document.querySelectorAll('.svg-fader')[i].style.display='none';
                    
                    midiMapper.assign(15, 'cc', i-6, (value)=>{
                        Tone.start();
                        setFaderElements({
                            svgElement: document.querySelector(`#thumb_${i-6}`),
                            inputElement: document.querySelectorAll('input')[i-6],
                            value: value,
                            y: getY(value, faderHeight, thumbHeight)
                        })
                        processFader(i, value)
                    })
                }
                
            break; 
        }
    }

    // incorporating Joel DazÃ©'s colour system for testing; please see https://github.com/blurringtheboundaries/colours
    const JD_COLOURS = 
        [
            '#ff9933',
            '#ffcc99',
            '#f85af8',
            '#c3fcc8',
            '#0cffff',
            '#ffff03',
            '#e0b5a2',
            '#ff0101',
            '#c37596',
            '#cc66ff',
            '#33cc33',
            '#0783dc'
        ];

    // emulating ScreenInstrument class for demo purposes
    let instrument = {
        setNotes(notes){
            
            notes.forEach((noteName,i)=>{
                if(document.querySelectorAll('.svg-thumb')[i]) document.querySelectorAll('.svg-thumb')[i].style.fill = JD_COLOURS[Tone.Frequency(noteName).toMidi()%12];
                if(document.querySelectorAll('input')[i]) document.querySelectorAll('input')[i].setAttribute('aria-label', `fader ${i+1} ${noteName.replace('#', ' sharp ')}`)
                if(sines[i]){
                    sines[i].frequency.rampTo(noteName, 1);
                }
            })
        }
    }

    // hide the sound preset menu
    document.querySelectorAll('#toolbar__preset').forEach(x=>x.remove())
    
    